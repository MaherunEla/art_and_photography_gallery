generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// model Account {
//     id                 String    @id @default(cuid())
//     userId             String
//     providerType       String
//     providerId         String
//     providerAccountId  String
//     refreshToken       String?
//     accessToken        String?
//     accessTokenExpires DateTime?
//     createdAt          DateTime  @default(now())
//     updatedAt          DateTime  @updatedAt
//     user               Signup    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([providerId, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     userId       String
//     expires      DateTime
//     sessionToken String   @unique
//     accessToken  String   @unique
//     createdAt    DateTime @default(now())
//     updatedAt    DateTime @updatedAt
//     user         Signup   @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model Signup {
    id             String    @id @default(uuid())
    name           String
    contact        String
    email          String    @unique
    password       String
    occupation     String
    image          String    @default("/assets/images/home/defaultimage.jpg")
    socialaccountf String    @default("")
    socialaccountl String    @default("")
    role           Role      @default(User)
    createdat      DateTime  @default(now())
    // accounts       Account[]
    // sessions       Session[]
    upload         Upload[]
    comment        Comment[]
}

enum Role {
    User
    Artist
    Admin
}

model Upload {
    id          String    @id @default(uuid())
    title       String
    price       Float?
    discount    Float?
    artist      String
    description String
    image       String
    createdAt   DateTime  @default(now())
    userEmail   String
    user        Signup    @relation(fields: [userEmail], references: [email])
    comment     Comment[]
}

model Order {
    id           String   @id @default(uuid())
    // name      String
    // contact   String
    // address   String
    // ordernote String
    formdata     Json
    product      Json
    total        Float?
    revenue      Float?
    totalrevenue Float?
    createdAt    DateTime @default(now())
    status       Status   @default(Pending)
    userEmail    String
}

model Comment {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    text      String
    userEmail String
    user      Signup   @relation(fields: [userEmail], references: [email])
    productId String
    product   Upload   @relation(fields: [productId], references: [id])
}

enum Status {
    Pending
    InProgress
    Deliverd
    Cancel
}
